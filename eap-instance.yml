---
- name: Create Ec2 instances
  hosts: localhost
  gather_facts: false
  vars:
    ami_id: "ami-0e3314c4e353d52d5"
    instance_type: "t2.medium"
    instance_count: 2
    aws_region: "us-east-1"
    aws_key_pair_name: "eap"
    vpc_name: "eap_vpc"
 
  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: 10.0.0.0/16
        region: "{{ aws_region }}"
      when: aws_vpc_id is not defined
      register: vpc

    - set_fact: 
        aws_vpc_id={{ vpc.vpc.id }}
      when: vpc is defined

    - name: Create Internet gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
      register: igw
    
    - name: get public IP
      community.general.ipify_facts:
      register: public_ip

    - name: output
      debug: msg="{{ public_ip }}"

    - set_fact: 
        my_ip={{ public_ip.ansible_facts.ipify_public_ip }}
      when: public_ip is defined

    - name: Create security group
      amazon.aws.ec2_group:
        name: example
        description: an example EC2 group
        vpc_id: "{{ aws_vpc_id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: "{{ my_ip }}/32"
          - proto: tcp
            from_port: 9990
            to_port: 9990
            cidr_ip: "{{ my_ip }}/32"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ my_ip }}/32"
      register: securitygroup
      when: aws_security_group is not defined
  
    - set_fact: 
        aws_security_group={{ securitygroup.group_name }}
      when: securitygroup is defined

    - name: Create subnet
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ aws_vpc_id }}"
        cidr: 10.0.0.0/20
        map_public: yes
      register: subnet
      when: vpc_subnet_id is not defined
    - set_fact: 
        vpc_subnet_id={{ subnet.subnet.id }}
      when: subnet is defined

    - name: Set up public subnet route table
      community.aws.ec2_vpc_route_table:
        vpc_id: "{{ aws_vpc_id }}"
        region: "{{ aws_region }}"
        tags:
          Name: Public
        subnets:
          - "{{ vpc_subnet_id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: public_route_table
      when: subnet is defined

    - name: Launch ec2 instances
      ec2:
        region: "{{ aws_region }}"
        key_name: "{{ aws_key_pair_name }}"
        group: "{{ aws_security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami_id }}"
        wait: yes
        wait_timeout: 500
        count: "{{ instance_count }}"
        instance_tags:
          name: JBoss-EAP-servers
          os: rhel
        monitoring: no
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        assign_public_ip: yes
      register: ec2
      delegate_to: localhost

    - name: Wait for SSH to come up
      local_action:
        module: wait_for
        host: "{{ item.public_ip }}"
        port: 22
        delay: 10
        timeout: 120
      loop: "{{ ec2.instances }}"
    - name: Add host to group 'jboss'
      ansible.builtin.add_host:
        hostname: '{{ item.dns_name }}'
        groups: jboss
      loop: "{{ ec2.instances }}"

- name: connect to JBoss instance, start EAP, and deploy application
  hosts: jboss
  gather_facts: true
  become: yes
  collections:
    - middleware_automation.wildfly
  vars:
    app_artifact_location: "./"
    app_artifact_name: "helloworld.war"
  tasks:
  - name: Start JBoss EAP
    ansible.builtin.command: systemctl start eap7-standalone
  - name: Copy artifact to JBoss server
    ansible.builtin.copy:
      src: "{{ app_artifact_location }}{{ app_artifact_name }}"
      dest: "/opt/{{ app_artifact_name }}"
  - name: "Deploy war file"
    include_role:
      name: wildfly_utils
      tasks_from: jboss_cli.yml
    vars:
      jboss_home: "/opt/rh/eap7/root/usr/share/wildfly"
      query: "'deploy --force /opt/{{ app_artifact_name }}'"
      jboss_cli_controller_port: "9990"
    