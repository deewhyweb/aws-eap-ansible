---
- name: Create Ec2 instances
  hosts: localhost
  gather_facts: false
  vars:
    ami_id: "ami-0e3314c4e353d52d5"
    instance_type: "t2.medium"
    instance_count: 2
    aws_region: "us-east-1"
    aws_key_pair_name: "eap"
    vpc_name: "eap_vpc"
    allocated_storage: 10
 
  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: 10.0.0.0/16
        region: "{{ aws_region }}"
      when: aws_vpc_id is not defined
      register: vpc

    - set_fact: 
        aws_vpc_id={{ vpc.vpc.id }}
      when: vpc is defined

    - name: Create Internet gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
      register: igw
    
    - name: get public IP
      community.general.ipify_facts:
      register: public_ip

    - set_fact: 
        my_ip={{ public_ip.ansible_facts.ipify_public_ip }}
      when: public_ip is defined
    
    - name: Create ec2-rds security group
      amazon.aws.ec2_group:
        name: ec2-rds
        description: an example EC2 group
        vpc_id: "{{ aws_vpc_id }}"
        region: "{{ aws_region }}"


    - name: Create rds-ec2 security group
      amazon.aws.ec2_group:
        name: rds-ec2
        description: an example EC2 group
        vpc_id: "{{ aws_vpc_id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 5432
            to_port: 5432
            group_name: "ec2-rds"
            rule_desc: "allow access from ec2 on port 5432"
      register: rds_ec2_security_group

    - name: modify ec2-rds security group
      amazon.aws.ec2_group:
        name: ec2-rds
        description: an example EC2 group
        vpc_id: "{{ aws_vpc_id }}"
        region: "{{ aws_region }}"
        rules_egress:
          - proto: tcp
            from_port: 5432
            to_port: 5432
            group_name: "rds-ec2"
            rule_desc: "allow access to postgresql on rds port 5432"

      register: securitygroup
      when: aws_security_group is not defined

    - name: Create security group
      amazon.aws.ec2_group:
        name: eap-security-group
        description: an example EC2 group
        vpc_id: "{{ aws_vpc_id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: "{{ my_ip }}/32"
          - proto: tcp
            from_port: 9990
            to_port: 9990
            cidr_ip: "{{ my_ip }}/32"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ my_ip }}/32"
      register: securitygroup
      when: aws_security_group is not defined
  
    - set_fact: 
        aws_security_group={{ securitygroup.group_name }}
      when: securitygroup is defined

    - name: Create subnet
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ aws_vpc_id }}"
        cidr: 10.0.1.0/24
        map_public: yes
      register: subnet
      when: vpc_subnet_id is not defined
    - set_fact: 
        vpc_subnet_id={{ subnet.subnet.id }}
      when: subnet is defined

    - name: Create db subnet1
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ aws_vpc_id }}"
        cidr: 10.0.2.0/24
        az: us-east-1a
      register: dbsubnet1
    - set_fact: 
        vpc_dbsubnet1_id={{ dbsubnet1.subnet.id }}
      when: dbsubnet1 is defined

    - name: Create db subnet2
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ aws_vpc_id }}"
        cidr: 10.0.3.0/24
        az: us-east-1f
      register: dbsubnet2
    - set_fact: 
        vpc_dbsubnet2_id={{ dbsubnet2.subnet.id }}
      when: dbsubnet2 is defined

    - name: Add or change a subnet group
      community.aws.rds_subnet_group:
        state: present
        name: eap-group
        description: subnet group
        subnets:
          - "{{ vpc_dbsubnet1_id }}"
          - "{{ vpc_dbsubnet2_id }}"


    - name: Create a DB instance 
      community.aws.rds_instance:
        id: test-postgres-db
        state: present
        engine: postgres
        vpc_security_group_ids:
        - "{{ rds_ec2_security_group.group_id }}"
        db_instance_class: db.t3.small
        db_subnet_group_name: "eap-group"
        username: "{{ postgres_username }}"
        password: "{{ postgres_password }}"
        allocated_storage: "{{ allocated_storage }}"
        db_name: "{{ postgres_db }}"
      register: postgres_instance

    - name: Add db to group 'pgsql'
      ansible.builtin.add_host:
        hostname: '{{ postgres_instance.endpoint.address }}'
        groups: pgsql


    - name: Set up public subnet route table
      community.aws.ec2_vpc_route_table:
        vpc_id: "{{ aws_vpc_id }}"
        region: "{{ aws_region }}"
        tags:
          Name: Public
        subnets:
          - "{{ vpc_subnet_id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: public_route_table
      when: subnet is defined

    - name: Launch ec2 instances
      ec2:
        region: "{{ aws_region }}"
        key_name: "{{ aws_key_pair_name }}"
        groups: 
        - "{{ aws_security_group }}"
        - ec2-rds
        instance_type: "{{ instance_type }}"
        image: "{{ ami_id }}"
        wait: yes
        wait_timeout: 500
        count: "{{ instance_count }}"
        instance_tags:
          name: JBoss-EAP-servers
          os: rhel
        monitoring: no
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        assign_public_ip: yes
      register: ec2
      delegate_to: localhost

    - name: Wait for SSH to come up
      local_action:
        module: wait_for
        host: "{{ item.public_ip }}"
        port: 22
        delay: 10
        timeout: 120
      loop: "{{ ec2.instances }}"
    - name: Add host to group 'jboss'
      ansible.builtin.add_host:
        hostname: '{{ item.dns_name }}'
        groups: jboss
      loop: "{{ ec2.instances }}"

